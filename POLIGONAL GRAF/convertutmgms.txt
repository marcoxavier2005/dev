/**
*'Macro iniciada em 07/09/2000
*'Autor : Geraldo Passos Amorim
*'Transformação de Coordenadas Geodésicas em Coordeandas UTM
*'Cálculo de Coordeandas UTM em Coordeandas Geodésicas
*/
// foi feita substituição da função fix() por Math.ceil() na linha 349
// foi inserido ajuste na função Math.truc() entre as linhas 53 e 63
 
var sessenta = 60;
var trezentossenta = 360;
var centoitenta = 180;
var trintaseis = 36;
var cem = 100;
var seismiles = 0.006;
var acerto = 0.0000000000001;
var RadSeg = 206264.8063;
 
 
/**
**** exemplo ****************
var x = myfunction(4, 3);   // function is called, return value will end up in x
 
function myfunction(a, b) {
  return a * b;             // function returns the product of a and b
}
 
if (time < 10) {
  greeting = "Good morning";
} else if (time < 20) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}
 
 
var x = "0";
switch (x) {
  case 0:
    text = "Off";
    break;
  case 1:
    text = "On";
    break;
  default:
    text = "No value found";
}
 
****
*/
 
// substitui a função Math.trunc()
Math.trunc = Math.trunc || function(x) {
  if (isNaN(x)) {
    return NaN;
  }
  if (x > 0) {
    return Math.floor(x);
  }
  return Math.ceil(x);
};
/**
MsDeg = MsDeg || function(x){
  if (isNaN(x)) {
    return NaN;
  } else {
    return MsDeg(x);
  }
}
*/
// 'Tranforma o angulo: de radianos para Graus 
 
function RadGraus(ang) {
  Graus = ang * centoitenta / Math.PI;
    if (Graus > trezentossenta){
      return Graus - trezentossenta;
    }else{
      return Graus;
    }
 
}
 
//'Transforma angulo : de Graus Decimais para Graus:Minutos:Segundos
 
function GMS(graud) {
  graud = graud;
  Grau = Math.trunc(graud);
  minutos = (graud - Grau) * sessenta;
  segundos = (minutos - Math.trunc(minutos)) * seismiles;
  return Grau + (Math.trunc(minutos)) / cem + segundos;
  
}
 
// 'Transforma ângulo de graus,minutos e segundos para graus decimais
 
function MsDeg(graums) {
  if (graums >= 0) {
    graums = graums + acerto;
  }else{
    graums = graums - acerto;
  }
  graum = (graums - Math.trunc(graums)) * cem;
  if (graum >= 0) {
    graum = graum + acerto;
  } else {
    graum = graum - acerto;
  }
  return Math.trunc(graums) + (Math.trunc(graum) / sessenta + (graum - Math.trunc(graum)) / trintaseis); // alterado o nome da variável
}
 
// 'Transforma graus decimais em radianos
 
function DegRad(graurad) {
  return graurad * Math.PI / centoitenta;
 
}
 
// 'Cálculo de Azimute a partir de Dois Pares de Coordenadas
 
function azimute(abcisAnterior, ordenAnterior, AbcisPosterior, OrdenPosterior){
  deltaX = AbcisPosterior - abcisAnterior;
  deltaY = OrdenPosterior - ordenAnterior;
  angulo = Math.atan2(deltaY, deltaX);
  if (deltaX >= 0){
    azimute = RadGraus(angulo);
  }else{
    azimute = RadGraus(angulo) + trezentossenta;
  }
  return azimute = GMS(azimute);
 
}
 
// 'Calculo da distância entre dois pares de Coordenadas
 
function Distancia(abcisAnterior, ordenAnterior, AbcisPosterior, OrdenPosterior){
  deltaX = AbcisPosterior - abcisAnterior;
  deltaY = OrdenPosterior - ordenAnterior;
  return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY,2));
 
}
 
//'Calculo de Coordenadas - Abcissa
 
function AbcisPosterior(abcisAnterior, Distancia, azimute){
    azimuth = MsDeg(azimute);
    azimut = DegRad(azimuth);
    return abcisAnterior + Distancia * Math.sin(azimut);
 
}
 
// 'Calculo de Coordenadas - Ordenada
 
function OrdenPosterior(ordenAnterior, Distancia, azimute){
  azimuth = MsDeg(azimute);
  azimuth = DegRad(azimuth);
  return ordenAnterior + Distancia * Math.cos(azimuth);
 
}
 
// 'Determinação do Semi-Eixo Maior do Elipsóide
 
function SemiEixoMaior(Elipsoide){
//  Elipsoide = Elipsoide;
  switch (Elipsoide) {
      
    //'Semi-Eixo Maior do Sad-69
    case 1:
    return 6378160;
    break;
      
    //'Semi-Eixo Maior do Córrego Alegre  
    case 2:
    return 6378388;
    break;
      